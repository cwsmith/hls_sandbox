// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "unite.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic unite::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic unite::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> unite::ap_ST_fsm_state1 = "1";
const sc_lv<4> unite::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<4> unite::ap_ST_fsm_state4 = "100";
const sc_lv<4> unite::ap_ST_fsm_state5 = "1000";
const sc_lv<32> unite::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool unite::ap_const_boolean_1 = true;
const int unite::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> unite::ap_const_lv32_1 = "1";
const sc_lv<1> unite::ap_const_lv1_0 = "0";
const bool unite::ap_const_boolean_0 = false;
const sc_lv<1> unite::ap_const_lv1_1 = "1";
const sc_lv<6> unite::ap_const_lv6_0 = "000000";
const sc_lv<32> unite::ap_const_lv32_2 = "10";
const sc_lv<32> unite::ap_const_lv32_3 = "11";
const sc_lv<6> unite::ap_const_lv6_20 = "100000";
const sc_lv<6> unite::ap_const_lv6_1 = "1";
const sc_lv<5> unite::ap_const_lv5_0 = "00000";
const sc_lv<10> unite::ap_const_lv10_1F = "11111";
const sc_lv<32> unite::ap_const_lv32_3FF = "1111111111";
const sc_lv<11> unite::ap_const_lv11_3FF = "1111111111";
const sc_lv<1024> unite::ap_const_lv1024_lc

unite::unite(sc_module_name name) : sc_module(name), mVcdFile(0) {
    unite_control_s_axi_U = new unite_control_s_axi<C_S_AXI_CONTROL_ADDR_WIDTH,C_S_AXI_CONTROL_DATA_WIDTH>("unite_control_s_axi_U");
    unite_control_s_axi_U->AWVALID(s_axi_control_AWVALID);
    unite_control_s_axi_U->AWREADY(s_axi_control_AWREADY);
    unite_control_s_axi_U->AWADDR(s_axi_control_AWADDR);
    unite_control_s_axi_U->WVALID(s_axi_control_WVALID);
    unite_control_s_axi_U->WREADY(s_axi_control_WREADY);
    unite_control_s_axi_U->WDATA(s_axi_control_WDATA);
    unite_control_s_axi_U->WSTRB(s_axi_control_WSTRB);
    unite_control_s_axi_U->ARVALID(s_axi_control_ARVALID);
    unite_control_s_axi_U->ARREADY(s_axi_control_ARREADY);
    unite_control_s_axi_U->ARADDR(s_axi_control_ARADDR);
    unite_control_s_axi_U->RVALID(s_axi_control_RVALID);
    unite_control_s_axi_U->RREADY(s_axi_control_RREADY);
    unite_control_s_axi_U->RDATA(s_axi_control_RDATA);
    unite_control_s_axi_U->RRESP(s_axi_control_RRESP);
    unite_control_s_axi_U->BVALID(s_axi_control_BVALID);
    unite_control_s_axi_U->BREADY(s_axi_control_BREADY);
    unite_control_s_axi_U->BRESP(s_axi_control_BRESP);
    unite_control_s_axi_U->ACLK(ap_clk);
    unite_control_s_axi_U->ARESET(ap_rst_n_inv);
    unite_control_s_axi_U->ACLK_EN(ap_var_for_const0);
    unite_control_s_axi_U->adj1_data_V(adj1_data_V);
    unite_control_s_axi_U->adj2_data_V(adj2_data_V);
    grp_readCompare_fu_113 = new readCompare("grp_readCompare_fu_113");
    grp_readCompare_fu_113->ap_clk(ap_clk);
    grp_readCompare_fu_113->ap_rst(ap_rst_n_inv);
    grp_readCompare_fu_113->ap_start(grp_readCompare_fu_113_ap_start);
    grp_readCompare_fu_113->ap_done(grp_readCompare_fu_113_ap_done);
    grp_readCompare_fu_113->ap_idle(grp_readCompare_fu_113_ap_idle);
    grp_readCompare_fu_113->ap_ready(grp_readCompare_fu_113_ap_ready);
    grp_readCompare_fu_113->i_in_stream_V_dout(items1_stream_V_dout);
    grp_readCompare_fu_113->i_in_stream_V_empty_n(items1_stream_V_empty_n);
    grp_readCompare_fu_113->i_in_stream_V_read(grp_readCompare_fu_113_i_in_stream_V_read);
    items1_stream_V_fifo_U = new fifo_w32_d1_A("items1_stream_V_fifo_U");
    items1_stream_V_fifo_U->clk(ap_clk);
    items1_stream_V_fifo_U->reset(ap_rst_n_inv);
    items1_stream_V_fifo_U->if_read_ce(ap_var_for_const0);
    items1_stream_V_fifo_U->if_write_ce(ap_var_for_const0);
    items1_stream_V_fifo_U->if_din(items1_stream_V_din);
    items1_stream_V_fifo_U->if_full_n(items1_stream_V_full_n);
    items1_stream_V_fifo_U->if_write(items1_stream_V_write);
    items1_stream_V_fifo_U->if_dout(items1_stream_V_dout);
    items1_stream_V_fifo_U->if_empty_n(items1_stream_V_empty_n);
    items1_stream_V_fifo_U->if_read(items1_stream_V_read);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Hi_assign_fu_142_p2);
    sensitive << ( Lo_assign_fu_134_p3 );

    SC_METHOD(thread_Lo_assign_fu_134_p3);
    sensitive << ( tmp_fu_130_p1 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( exitcond_i_reg_259 );
    sensitive << ( items1_stream_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( exitcond_i_reg_259 );
    sensitive << ( items1_stream_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( exitcond_i_reg_259 );
    sensitive << ( items1_stream_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);
    sensitive << ( exitcond_i_reg_259 );
    sensitive << ( items1_stream_V_full_n );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( exitcond_i_fu_118_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( grp_readCompare_fu_113_ap_done );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_readCompare_fu_113_ap_done );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_exitcond_i_fu_118_p2);
    sensitive << ( i_assign_reg_102 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_grp_readCompare_fu_113_ap_start);
    sensitive << ( grp_readCompare_fu_113_ap_start_reg );

    SC_METHOD(thread_i_fu_124_p2);
    sensitive << ( i_assign_reg_102 );

    SC_METHOD(thread_items1_stream_V_din);
    sensitive << ( exitcond_i_reg_259 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( p_Result_s_fu_237_p2 );

    SC_METHOD(thread_items1_stream_V_read);
    sensitive << ( grp_readCompare_fu_113_i_in_stream_V_read );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_items1_stream_V_write);
    sensitive << ( exitcond_i_reg_259 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_p_Result_s_fu_237_p2);
    sensitive << ( tmp_14_reg_273 );
    sensitive << ( tmp_15_fu_231_p2 );

    SC_METHOD(thread_tmp_10_fu_204_p3);
    sensitive << ( tmp_2_fu_154_p1 );
    sensitive << ( tmp_1_fu_148_p2 );
    sensitive << ( tmp_6_fu_177_p2 );

    SC_METHOD(thread_tmp_11_fu_212_p2);
    sensitive << ( tmp_8_fu_189_p3 );

    SC_METHOD(thread_tmp_12_fu_218_p1);
    sensitive << ( tmp_10_fu_204_p3 );

    SC_METHOD(thread_tmp_13_fu_228_p1);
    sensitive << ( tmp_11_reg_268 );

    SC_METHOD(thread_tmp_14_fu_222_p2);
    sensitive << ( tmp_9_fu_197_p3 );
    sensitive << ( tmp_12_fu_218_p1 );

    SC_METHOD(thread_tmp_15_fu_231_p2);
    sensitive << ( tmp_13_fu_228_p1 );

    SC_METHOD(thread_tmp_1_fu_148_p2);
    sensitive << ( exitcond_i_fu_118_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( Lo_assign_fu_134_p3 );
    sensitive << ( Hi_assign_fu_142_p2 );

    SC_METHOD(thread_tmp_2_fu_154_p1);
    sensitive << ( Lo_assign_fu_134_p3 );

    SC_METHOD(thread_tmp_3_fu_158_p1);
    sensitive << ( Hi_assign_fu_142_p2 );

    SC_METHOD(thread_tmp_4_fu_162_p4);
    sensitive << ( adj1_data_V_read_reg_247 );

    SC_METHOD(thread_tmp_5_fu_171_p2);
    sensitive << ( tmp_2_fu_154_p1 );
    sensitive << ( tmp_3_fu_158_p1 );

    SC_METHOD(thread_tmp_6_fu_177_p2);
    sensitive << ( tmp_2_fu_154_p1 );

    SC_METHOD(thread_tmp_7_fu_183_p2);
    sensitive << ( tmp_2_fu_154_p1 );
    sensitive << ( tmp_3_fu_158_p1 );

    SC_METHOD(thread_tmp_8_fu_189_p3);
    sensitive << ( tmp_1_fu_148_p2 );
    sensitive << ( tmp_5_fu_171_p2 );
    sensitive << ( tmp_7_fu_183_p2 );

    SC_METHOD(thread_tmp_9_fu_197_p3);
    sensitive << ( adj1_data_V_read_reg_247 );
    sensitive << ( tmp_1_fu_148_p2 );
    sensitive << ( tmp_4_fu_162_p4 );

    SC_METHOD(thread_tmp_fu_130_p1);
    sensitive << ( i_assign_reg_102 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( exitcond_i_fu_118_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( grp_readCompare_fu_113_ap_done );
    sensitive << ( ap_CS_fsm_state5 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    grp_readCompare_fu_113_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "unite_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, s_axi_control_AWVALID, "(port)s_axi_control_AWVALID");
    sc_trace(mVcdFile, s_axi_control_AWREADY, "(port)s_axi_control_AWREADY");
    sc_trace(mVcdFile, s_axi_control_AWADDR, "(port)s_axi_control_AWADDR");
    sc_trace(mVcdFile, s_axi_control_WVALID, "(port)s_axi_control_WVALID");
    sc_trace(mVcdFile, s_axi_control_WREADY, "(port)s_axi_control_WREADY");
    sc_trace(mVcdFile, s_axi_control_WDATA, "(port)s_axi_control_WDATA");
    sc_trace(mVcdFile, s_axi_control_WSTRB, "(port)s_axi_control_WSTRB");
    sc_trace(mVcdFile, s_axi_control_ARVALID, "(port)s_axi_control_ARVALID");
    sc_trace(mVcdFile, s_axi_control_ARREADY, "(port)s_axi_control_ARREADY");
    sc_trace(mVcdFile, s_axi_control_ARADDR, "(port)s_axi_control_ARADDR");
    sc_trace(mVcdFile, s_axi_control_RVALID, "(port)s_axi_control_RVALID");
    sc_trace(mVcdFile, s_axi_control_RREADY, "(port)s_axi_control_RREADY");
    sc_trace(mVcdFile, s_axi_control_RDATA, "(port)s_axi_control_RDATA");
    sc_trace(mVcdFile, s_axi_control_RRESP, "(port)s_axi_control_RRESP");
    sc_trace(mVcdFile, s_axi_control_BVALID, "(port)s_axi_control_BVALID");
    sc_trace(mVcdFile, s_axi_control_BREADY, "(port)s_axi_control_BREADY");
    sc_trace(mVcdFile, s_axi_control_BRESP, "(port)s_axi_control_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, adj1_data_V, "adj1_data_V");
    sc_trace(mVcdFile, adj2_data_V, "adj2_data_V");
    sc_trace(mVcdFile, i_assign_reg_102, "i_assign_reg_102");
    sc_trace(mVcdFile, adj1_data_V_read_reg_247, "adj1_data_V_read_reg_247");
    sc_trace(mVcdFile, exitcond_i_fu_118_p2, "exitcond_i_fu_118_p2");
    sc_trace(mVcdFile, exitcond_i_reg_259, "exitcond_i_reg_259");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, items1_stream_V_din, "items1_stream_V_din");
    sc_trace(mVcdFile, items1_stream_V_full_n, "items1_stream_V_full_n");
    sc_trace(mVcdFile, items1_stream_V_write, "items1_stream_V_write");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, i_fu_124_p2, "i_fu_124_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_11_fu_212_p2, "tmp_11_fu_212_p2");
    sc_trace(mVcdFile, tmp_11_reg_268, "tmp_11_reg_268");
    sc_trace(mVcdFile, tmp_14_fu_222_p2, "tmp_14_fu_222_p2");
    sc_trace(mVcdFile, tmp_14_reg_273, "tmp_14_reg_273");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, grp_readCompare_fu_113_ap_start, "grp_readCompare_fu_113_ap_start");
    sc_trace(mVcdFile, grp_readCompare_fu_113_ap_done, "grp_readCompare_fu_113_ap_done");
    sc_trace(mVcdFile, grp_readCompare_fu_113_ap_idle, "grp_readCompare_fu_113_ap_idle");
    sc_trace(mVcdFile, grp_readCompare_fu_113_ap_ready, "grp_readCompare_fu_113_ap_ready");
    sc_trace(mVcdFile, grp_readCompare_fu_113_i_in_stream_V_read, "grp_readCompare_fu_113_i_in_stream_V_read");
    sc_trace(mVcdFile, grp_readCompare_fu_113_ap_start_reg, "grp_readCompare_fu_113_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, items1_stream_V_dout, "items1_stream_V_dout");
    sc_trace(mVcdFile, items1_stream_V_empty_n, "items1_stream_V_empty_n");
    sc_trace(mVcdFile, items1_stream_V_read, "items1_stream_V_read");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, tmp_fu_130_p1, "tmp_fu_130_p1");
    sc_trace(mVcdFile, Lo_assign_fu_134_p3, "Lo_assign_fu_134_p3");
    sc_trace(mVcdFile, Hi_assign_fu_142_p2, "Hi_assign_fu_142_p2");
    sc_trace(mVcdFile, tmp_2_fu_154_p1, "tmp_2_fu_154_p1");
    sc_trace(mVcdFile, tmp_3_fu_158_p1, "tmp_3_fu_158_p1");
    sc_trace(mVcdFile, tmp_1_fu_148_p2, "tmp_1_fu_148_p2");
    sc_trace(mVcdFile, tmp_5_fu_171_p2, "tmp_5_fu_171_p2");
    sc_trace(mVcdFile, tmp_7_fu_183_p2, "tmp_7_fu_183_p2");
    sc_trace(mVcdFile, tmp_4_fu_162_p4, "tmp_4_fu_162_p4");
    sc_trace(mVcdFile, tmp_6_fu_177_p2, "tmp_6_fu_177_p2");
    sc_trace(mVcdFile, tmp_8_fu_189_p3, "tmp_8_fu_189_p3");
    sc_trace(mVcdFile, tmp_10_fu_204_p3, "tmp_10_fu_204_p3");
    sc_trace(mVcdFile, tmp_9_fu_197_p3, "tmp_9_fu_197_p3");
    sc_trace(mVcdFile, tmp_12_fu_218_p1, "tmp_12_fu_218_p1");
    sc_trace(mVcdFile, tmp_13_fu_228_p1, "tmp_13_fu_228_p1");
    sc_trace(mVcdFile, tmp_15_fu_231_p2, "tmp_15_fu_231_p2");
    sc_trace(mVcdFile, p_Result_s_fu_237_p2, "p_Result_s_fu_237_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("unite.hdltvin.dat");
    mHdltvoutHandle.open("unite.hdltvout.dat");
}

unite::~unite() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete unite_control_s_axi_U;
    delete grp_readCompare_fu_113;
    delete items1_stream_V_fifo_U;
}

void unite::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void unite::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_readCompare_fu_113_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            grp_readCompare_fu_113_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_readCompare_fu_113_ap_ready.read())) {
            grp_readCompare_fu_113_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(exitcond_i_fu_118_p2.read(), ap_const_lv1_0))) {
        i_assign_reg_102 = i_fu_124_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_assign_reg_102 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        adj1_data_V_read_reg_247 = adj1_data_V.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_i_reg_259 = exitcond_i_fu_118_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_i_fu_118_p2.read(), ap_const_lv1_0))) {
        tmp_11_reg_268 = tmp_11_fu_212_p2.read();
        tmp_14_reg_273 = tmp_14_fu_222_p2.read();
    }
}

void unite::thread_Hi_assign_fu_142_p2() {
    Hi_assign_fu_142_p2 = (Lo_assign_fu_134_p3.read() | ap_const_lv10_1F);
}

void unite::thread_Lo_assign_fu_134_p3() {
    Lo_assign_fu_134_p3 = esl_concat<5,5>(tmp_fu_130_p1.read(), ap_const_lv5_0);
}

void unite::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void unite::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void unite::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[2];
}

void unite::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[3];
}

void unite::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void unite::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_0, items1_stream_V_full_n.read()) && esl_seteq<1,1,1>(exitcond_i_reg_259.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()));
}

void unite::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_0, items1_stream_V_full_n.read()) && esl_seteq<1,1,1>(exitcond_i_reg_259.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()));
}

void unite::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_0, items1_stream_V_full_n.read()) && esl_seteq<1,1,1>(exitcond_i_reg_259.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()));
}

void unite::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void unite::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_logic_0, items1_stream_V_full_n.read()) && esl_seteq<1,1,1>(exitcond_i_reg_259.read(), ap_const_lv1_0));
}

void unite::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(exitcond_i_fu_118_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void unite::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(grp_readCompare_fu_113_ap_done.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void unite::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void unite::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void unite::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void unite::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(grp_readCompare_fu_113_ap_done.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void unite::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void unite::thread_exitcond_i_fu_118_p2() {
    exitcond_i_fu_118_p2 = (!i_assign_reg_102.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(i_assign_reg_102.read() == ap_const_lv6_20);
}

void unite::thread_grp_readCompare_fu_113_ap_start() {
    grp_readCompare_fu_113_ap_start = grp_readCompare_fu_113_ap_start_reg.read();
}

void unite::thread_i_fu_124_p2() {
    i_fu_124_p2 = (!i_assign_reg_102.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_assign_reg_102.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void unite::thread_items1_stream_V_din() {
    items1_stream_V_din = p_Result_s_fu_237_p2.read().range(32-1, 0);
}

void unite::thread_items1_stream_V_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        items1_stream_V_read = grp_readCompare_fu_113_i_in_stream_V_read.read();
    } else {
        items1_stream_V_read = ap_const_logic_0;
    }
}

void unite::thread_items1_stream_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(exitcond_i_reg_259.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        items1_stream_V_write = ap_const_logic_1;
    } else {
        items1_stream_V_write = ap_const_logic_0;
    }
}

void unite::thread_p_Result_s_fu_237_p2() {
    p_Result_s_fu_237_p2 = (tmp_14_reg_273.read() & tmp_15_fu_231_p2.read());
}

void unite::thread_tmp_10_fu_204_p3() {
    tmp_10_fu_204_p3 = (!tmp_1_fu_148_p2.read()[0].is_01())? sc_lv<11>(): ((tmp_1_fu_148_p2.read()[0].to_bool())? tmp_6_fu_177_p2.read(): tmp_2_fu_154_p1.read());
}

void unite::thread_tmp_11_fu_212_p2() {
    tmp_11_fu_212_p2 = (!ap_const_lv11_3FF.is_01() || !tmp_8_fu_189_p3.read().is_01())? sc_lv<11>(): (sc_biguint<11>(ap_const_lv11_3FF) - sc_biguint<11>(tmp_8_fu_189_p3.read()));
}

void unite::thread_tmp_12_fu_218_p1() {
    tmp_12_fu_218_p1 = esl_zext<1024,11>(tmp_10_fu_204_p3.read());
}

void unite::thread_tmp_13_fu_228_p1() {
    tmp_13_fu_228_p1 = esl_zext<1024,11>(tmp_11_reg_268.read());
}

void unite::thread_tmp_14_fu_222_p2() {
    tmp_14_fu_222_p2 = (!tmp_12_fu_218_p1.read().is_01())? sc_lv<1024>(): tmp_9_fu_197_p3.read() >> (unsigned short)tmp_12_fu_218_p1.read().to_uint();
}

void unite::thread_tmp_15_fu_231_p2() {
    tmp_15_fu_231_p2 = (!tmp_13_fu_228_p1.read().is_01())? sc_lv<1024>(): ap_const_lv1024_lc_1 >> (unsigned short)tmp_13_fu_228_p1.read().to_uint();
}

void unite::thread_tmp_1_fu_148_p2() {
    tmp_1_fu_148_p2 = (!Lo_assign_fu_134_p3.read().is_01() || !Hi_assign_fu_142_p2.read().is_01())? sc_lv<1>(): (sc_biguint<10>(Lo_assign_fu_134_p3.read()) > sc_biguint<10>(Hi_assign_fu_142_p2.read()));
}

void unite::thread_tmp_2_fu_154_p1() {
    tmp_2_fu_154_p1 = esl_zext<11,10>(Lo_assign_fu_134_p3.read());
}

void unite::thread_tmp_3_fu_158_p1() {
    tmp_3_fu_158_p1 = esl_zext<11,10>(Hi_assign_fu_142_p2.read());
}

void unite::thread_tmp_4_fu_162_p4() {
    tmp_4_fu_162_p4 = adj1_data_V_read_reg_247.read().range(0, 1023);
}

void unite::thread_tmp_5_fu_171_p2() {
    tmp_5_fu_171_p2 = (!tmp_2_fu_154_p1.read().is_01() || !tmp_3_fu_158_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(tmp_2_fu_154_p1.read()) - sc_biguint<11>(tmp_3_fu_158_p1.read()));
}

void unite::thread_tmp_6_fu_177_p2() {
    tmp_6_fu_177_p2 = (tmp_2_fu_154_p1.read() ^ ap_const_lv11_3FF);
}

void unite::thread_tmp_7_fu_183_p2() {
    tmp_7_fu_183_p2 = (!tmp_3_fu_158_p1.read().is_01() || !tmp_2_fu_154_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(tmp_3_fu_158_p1.read()) - sc_biguint<11>(tmp_2_fu_154_p1.read()));
}

void unite::thread_tmp_8_fu_189_p3() {
    tmp_8_fu_189_p3 = (!tmp_1_fu_148_p2.read()[0].is_01())? sc_lv<11>(): ((tmp_1_fu_148_p2.read()[0].to_bool())? tmp_5_fu_171_p2.read(): tmp_7_fu_183_p2.read());
}

void unite::thread_tmp_9_fu_197_p3() {
    tmp_9_fu_197_p3 = (!tmp_1_fu_148_p2.read()[0].is_01())? sc_lv<1024>(): ((tmp_1_fu_148_p2.read()[0].to_bool())? tmp_4_fu_162_p4.read(): adj1_data_V_read_reg_247.read());
}

void unite::thread_tmp_fu_130_p1() {
    tmp_fu_130_p1 = i_assign_reg_102.read().range(5-1, 0);
}

void unite::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!(esl_seteq<1,1,1>(exitcond_i_fu_118_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(exitcond_i_fu_118_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(grp_readCompare_fu_113_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

void unite::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_AWVALID\" :  \"" << s_axi_control_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_AWREADY\" :  \"" << s_axi_control_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_AWADDR\" :  \"" << s_axi_control_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WVALID\" :  \"" << s_axi_control_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_WREADY\" :  \"" << s_axi_control_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WDATA\" :  \"" << s_axi_control_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WSTRB\" :  \"" << s_axi_control_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_ARVALID\" :  \"" << s_axi_control_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_ARREADY\" :  \"" << s_axi_control_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_ARADDR\" :  \"" << s_axi_control_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RVALID\" :  \"" << s_axi_control_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_RREADY\" :  \"" << s_axi_control_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RDATA\" :  \"" << s_axi_control_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RRESP\" :  \"" << s_axi_control_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_BVALID\" :  \"" << s_axi_control_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_BREADY\" :  \"" << s_axi_control_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_BRESP\" :  \"" << s_axi_control_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

