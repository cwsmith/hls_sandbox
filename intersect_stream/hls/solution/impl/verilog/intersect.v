// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="intersect,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku5p-sfvb784-3-e,HLS_INPUT_CLOCK=3.333333,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.635750,HLS_SYN_LAT=104,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=5283,HLS_SYN_LUT=11652,HLS_VERSION=2018_2}" *)

module intersect (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_pp0_stage0 = 6'd2;
parameter    ap_ST_fsm_state4 = 6'd4;
parameter    ap_ST_fsm_state5 = 6'd8;
parameter    ap_ST_fsm_pp1_stage0 = 6'd16;
parameter    ap_ST_fsm_state8 = 6'd32;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 9;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1023:0] adj1_data_V;
wire   [1023:0] adj2_data_V;
reg   [5:0] i_assign_reg_141;
reg   [5:0] i_assign_1_reg_152;
reg   [1023:0] adj2_data_V_read_reg_311;
reg   [1023:0] adj1_data_V_read_reg_316;
wire   [0:0] exitcond_i_fu_170_p2;
reg   [0:0] exitcond_i_reg_334;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire   [31:0] items1_stream_V_din;
wire    items1_stream_V_full_n;
reg    items1_stream_V_write;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [5:0] i_fu_176_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [10:0] tmp_12_fu_264_p2;
reg   [10:0] tmp_12_reg_343;
wire   [1023:0] tmp_15_fu_274_p2;
reg   [1023:0] tmp_15_reg_348;
wire   [0:0] exitcond_i1_fu_299_p2;
reg   [0:0] exitcond_i1_reg_353;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state6_pp1_stage0_iter0;
wire   [31:0] items2_stream_V_dout;
wire    items2_stream_V_empty_n;
reg    items2_stream_V_read;
reg    ap_block_state7_pp1_stage0_iter1;
reg    ap_enable_reg_pp1_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [5:0] i_2_fu_305_p2;
reg    ap_enable_reg_pp1_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_CS_fsm_state5;
wire    grp_readCompare_fu_163_ap_idle;
wire    grp_readCompare_fu_163_ap_ready;
wire    grp_readCompare_fu_163_ap_done;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state6;
wire    grp_readCompare_fu_163_ap_start;
wire    grp_readCompare_fu_163_i_in_stream_V_read;
wire   [31:0] grp_readCompare_fu_163_i_out_stream_V_din;
wire    grp_readCompare_fu_163_i_out_stream_V_write;
reg    grp_readCompare_fu_163_ap_start_reg;
wire    ap_CS_fsm_state4;
wire   [31:0] items1_stream_V_dout;
wire    items1_stream_V_empty_n;
reg    items1_stream_V_read;
wire    items2_stream_V_full_n;
reg    items2_stream_V_write;
reg    ap_block_pp0_stage0_01001;
wire    ap_block_pp0_stage0;
wire   [4:0] tmp_fu_182_p1;
wire   [9:0] Lo_assign_fu_186_p3;
wire   [9:0] Hi_assign_fu_194_p2;
wire   [10:0] tmp_3_fu_206_p1;
wire   [10:0] tmp_4_fu_210_p1;
wire   [0:0] tmp_2_fu_200_p2;
wire   [10:0] tmp_6_fu_223_p2;
wire   [10:0] tmp_8_fu_235_p2;
reg   [1023:0] tmp_5_fu_214_p4;
wire   [10:0] tmp_7_fu_229_p2;
wire   [10:0] tmp_9_fu_241_p3;
wire   [10:0] tmp_11_fu_256_p3;
wire   [1023:0] tmp_10_fu_249_p3;
wire   [1023:0] tmp_13_fu_270_p1;
wire   [1023:0] tmp_14_fu_280_p1;
wire   [1023:0] tmp_16_fu_283_p2;
wire   [1023:0] p_Result_s_fu_289_p2;
wire    ap_block_pp1_stage0;
wire    ap_CS_fsm_state8;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 grp_readCompare_fu_163_ap_start_reg = 1'b0;
end

intersect_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
intersect_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .adj1_data_V(adj1_data_V),
    .adj2_data_V(adj2_data_V)
);

readCompare grp_readCompare_fu_163(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_readCompare_fu_163_ap_start),
    .ap_done(grp_readCompare_fu_163_ap_done),
    .ap_idle(grp_readCompare_fu_163_ap_idle),
    .ap_ready(grp_readCompare_fu_163_ap_ready),
    .adj2_data_V(adj2_data_V_read_reg_311),
    .i_in_stream_V_dout(items1_stream_V_dout),
    .i_in_stream_V_empty_n(items1_stream_V_empty_n),
    .i_in_stream_V_read(grp_readCompare_fu_163_i_in_stream_V_read),
    .i_out_stream_V_din(grp_readCompare_fu_163_i_out_stream_V_din),
    .i_out_stream_V_full_n(items2_stream_V_full_n),
    .i_out_stream_V_write(grp_readCompare_fu_163_i_out_stream_V_write)
);

fifo_w32_d1_A items1_stream_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(items1_stream_V_din),
    .if_full_n(items1_stream_V_full_n),
    .if_write(items1_stream_V_write),
    .if_dout(items1_stream_V_dout),
    .if_empty_n(items1_stream_V_empty_n),
    .if_read(items1_stream_V_read)
);

fifo_w32_d1_A items2_stream_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_readCompare_fu_163_i_out_stream_V_din),
    .if_full_n(items2_stream_V_full_n),
    .if_write(items2_stream_V_write),
    .if_dout(items2_stream_V_dout),
    .if_empty_n(items2_stream_V_empty_n),
    .if_read(items2_stream_V_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (grp_readCompare_fu_163_ap_done == 1'b1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state6);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (grp_readCompare_fu_163_ap_done == 1'b1))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_readCompare_fu_163_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_readCompare_fu_163_ap_start_reg <= 1'b1;
        end else if ((grp_readCompare_fu_163_ap_ready == 1'b1)) begin
            grp_readCompare_fu_163_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i1_fu_299_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_assign_1_reg_152 <= i_2_fu_305_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (grp_readCompare_fu_163_ap_done == 1'b1))) begin
        i_assign_1_reg_152 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_fu_170_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_assign_reg_141 <= i_fu_176_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_assign_reg_141 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        adj1_data_V_read_reg_316 <= adj1_data_V;
        adj2_data_V_read_reg_311 <= adj2_data_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        exitcond_i1_reg_353 <= exitcond_i1_fu_299_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_i_reg_334 <= exitcond_i_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_fu_170_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_12_reg_343[10 : 1] <= tmp_12_fu_264_p2[10 : 1];
        tmp_15_reg_348 <= tmp_15_fu_274_p2;
    end
end

always @ (*) begin
    if ((exitcond_i_fu_170_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_i1_fu_299_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        items1_stream_V_read = grp_readCompare_fu_163_i_in_stream_V_read;
    end else begin
        items1_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_reg_334 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        items1_stream_V_write = 1'b1;
    end else begin
        items1_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i1_reg_353 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        items2_stream_V_read = 1'b1;
    end else begin
        items2_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        items2_stream_V_write = grp_readCompare_fu_163_i_out_stream_V_write;
    end else begin
        items2_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((exitcond_i_fu_170_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((exitcond_i_fu_170_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (grp_readCompare_fu_163_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_i1_fu_299_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_i1_fu_299_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Hi_assign_fu_194_p2 = (10'd31 | Lo_assign_fu_186_p3);

assign Lo_assign_fu_186_p3 = {{tmp_fu_182_p1}, {5'd0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((exitcond_i_reg_334 == 1'd0) & (items1_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((exitcond_i_reg_334 == 1'd0) & (items1_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((exitcond_i_reg_334 == 1'd0) & (items1_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((exitcond_i1_reg_353 == 1'd0) & (items2_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((exitcond_i1_reg_353 == 1'd0) & (items2_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((exitcond_i_reg_334 == 1'd0) & (items1_stream_V_full_n == 1'b0));
end

assign ap_block_state6_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp1_stage0_iter1 = ((exitcond_i1_reg_353 == 1'd0) & (items2_stream_V_empty_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond_i1_fu_299_p2 = ((i_assign_1_reg_152 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond_i_fu_170_p2 = ((i_assign_reg_141 == 6'd32) ? 1'b1 : 1'b0);

assign grp_readCompare_fu_163_ap_start = grp_readCompare_fu_163_ap_start_reg;

assign i_2_fu_305_p2 = (i_assign_1_reg_152 + 6'd1);

assign i_fu_176_p2 = (i_assign_reg_141 + 6'd1);

assign items1_stream_V_din = p_Result_s_fu_289_p2[31:0];

assign p_Result_s_fu_289_p2 = (tmp_16_fu_283_p2 & tmp_15_reg_348);

assign tmp_10_fu_249_p3 = ((tmp_2_fu_200_p2[0:0] === 1'b1) ? tmp_5_fu_214_p4 : adj1_data_V_read_reg_316);

assign tmp_11_fu_256_p3 = ((tmp_2_fu_200_p2[0:0] === 1'b1) ? tmp_7_fu_229_p2 : tmp_3_fu_206_p1);

assign tmp_12_fu_264_p2 = (11'd1023 - tmp_9_fu_241_p3);

assign tmp_13_fu_270_p1 = tmp_11_fu_256_p3;

assign tmp_14_fu_280_p1 = tmp_12_reg_343;

assign tmp_15_fu_274_p2 = tmp_10_fu_249_p3 >> tmp_13_fu_270_p1;

assign tmp_16_fu_283_p2 = 1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 >> tmp_14_fu_280_p1;

assign tmp_2_fu_200_p2 = ((Lo_assign_fu_186_p3 > Hi_assign_fu_194_p2) ? 1'b1 : 1'b0);

assign tmp_3_fu_206_p1 = Lo_assign_fu_186_p3;

assign tmp_4_fu_210_p1 = Hi_assign_fu_194_p2;

integer ap_tvar_int_0;

always @ (adj1_data_V_read_reg_316) begin
    for (ap_tvar_int_0 = 1024 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 1023 - 0) begin
            tmp_5_fu_214_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_5_fu_214_p4[ap_tvar_int_0] = adj1_data_V_read_reg_316[1023 - ap_tvar_int_0];
        end
    end
end

assign tmp_6_fu_223_p2 = (tmp_3_fu_206_p1 - tmp_4_fu_210_p1);

assign tmp_7_fu_229_p2 = (tmp_3_fu_206_p1 ^ 11'd1023);

assign tmp_8_fu_235_p2 = (tmp_4_fu_210_p1 - tmp_3_fu_206_p1);

assign tmp_9_fu_241_p3 = ((tmp_2_fu_200_p2[0:0] === 1'b1) ? tmp_6_fu_223_p2 : tmp_8_fu_235_p2);

assign tmp_fu_182_p1 = i_assign_reg_141[4:0];

always @ (posedge ap_clk) begin
    tmp_12_reg_343[0] <= 1'b0;
end

endmodule //intersect
