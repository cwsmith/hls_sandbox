// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module unite (
        ap_clk,
        ap_rst,
        m_axi_u_adjs_data_V_AWVALID,
        m_axi_u_adjs_data_V_AWREADY,
        m_axi_u_adjs_data_V_AWADDR,
        m_axi_u_adjs_data_V_AWID,
        m_axi_u_adjs_data_V_AWLEN,
        m_axi_u_adjs_data_V_AWSIZE,
        m_axi_u_adjs_data_V_AWBURST,
        m_axi_u_adjs_data_V_AWLOCK,
        m_axi_u_adjs_data_V_AWCACHE,
        m_axi_u_adjs_data_V_AWPROT,
        m_axi_u_adjs_data_V_AWQOS,
        m_axi_u_adjs_data_V_AWREGION,
        m_axi_u_adjs_data_V_AWUSER,
        m_axi_u_adjs_data_V_WVALID,
        m_axi_u_adjs_data_V_WREADY,
        m_axi_u_adjs_data_V_WDATA,
        m_axi_u_adjs_data_V_WSTRB,
        m_axi_u_adjs_data_V_WLAST,
        m_axi_u_adjs_data_V_WID,
        m_axi_u_adjs_data_V_WUSER,
        m_axi_u_adjs_data_V_ARVALID,
        m_axi_u_adjs_data_V_ARREADY,
        m_axi_u_adjs_data_V_ARADDR,
        m_axi_u_adjs_data_V_ARID,
        m_axi_u_adjs_data_V_ARLEN,
        m_axi_u_adjs_data_V_ARSIZE,
        m_axi_u_adjs_data_V_ARBURST,
        m_axi_u_adjs_data_V_ARLOCK,
        m_axi_u_adjs_data_V_ARCACHE,
        m_axi_u_adjs_data_V_ARPROT,
        m_axi_u_adjs_data_V_ARQOS,
        m_axi_u_adjs_data_V_ARREGION,
        m_axi_u_adjs_data_V_ARUSER,
        m_axi_u_adjs_data_V_RVALID,
        m_axi_u_adjs_data_V_RREADY,
        m_axi_u_adjs_data_V_RDATA,
        m_axi_u_adjs_data_V_RLAST,
        m_axi_u_adjs_data_V_RID,
        m_axi_u_adjs_data_V_RUSER,
        m_axi_u_adjs_data_V_RRESP,
        m_axi_u_adjs_data_V_BVALID,
        m_axi_u_adjs_data_V_BREADY,
        m_axi_u_adjs_data_V_BRESP,
        m_axi_u_adjs_data_V_BID,
        m_axi_u_adjs_data_V_BUSER,
        u_adjs_data_V_offset
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
output   m_axi_u_adjs_data_V_AWVALID;
input   m_axi_u_adjs_data_V_AWREADY;
output  [31:0] m_axi_u_adjs_data_V_AWADDR;
output  [0:0] m_axi_u_adjs_data_V_AWID;
output  [31:0] m_axi_u_adjs_data_V_AWLEN;
output  [2:0] m_axi_u_adjs_data_V_AWSIZE;
output  [1:0] m_axi_u_adjs_data_V_AWBURST;
output  [1:0] m_axi_u_adjs_data_V_AWLOCK;
output  [3:0] m_axi_u_adjs_data_V_AWCACHE;
output  [2:0] m_axi_u_adjs_data_V_AWPROT;
output  [3:0] m_axi_u_adjs_data_V_AWQOS;
output  [3:0] m_axi_u_adjs_data_V_AWREGION;
output  [0:0] m_axi_u_adjs_data_V_AWUSER;
output   m_axi_u_adjs_data_V_WVALID;
input   m_axi_u_adjs_data_V_WREADY;
output  [1023:0] m_axi_u_adjs_data_V_WDATA;
output  [127:0] m_axi_u_adjs_data_V_WSTRB;
output   m_axi_u_adjs_data_V_WLAST;
output  [0:0] m_axi_u_adjs_data_V_WID;
output  [0:0] m_axi_u_adjs_data_V_WUSER;
output   m_axi_u_adjs_data_V_ARVALID;
input   m_axi_u_adjs_data_V_ARREADY;
output  [31:0] m_axi_u_adjs_data_V_ARADDR;
output  [0:0] m_axi_u_adjs_data_V_ARID;
output  [31:0] m_axi_u_adjs_data_V_ARLEN;
output  [2:0] m_axi_u_adjs_data_V_ARSIZE;
output  [1:0] m_axi_u_adjs_data_V_ARBURST;
output  [1:0] m_axi_u_adjs_data_V_ARLOCK;
output  [3:0] m_axi_u_adjs_data_V_ARCACHE;
output  [2:0] m_axi_u_adjs_data_V_ARPROT;
output  [3:0] m_axi_u_adjs_data_V_ARQOS;
output  [3:0] m_axi_u_adjs_data_V_ARREGION;
output  [0:0] m_axi_u_adjs_data_V_ARUSER;
input   m_axi_u_adjs_data_V_RVALID;
output   m_axi_u_adjs_data_V_RREADY;
input  [1023:0] m_axi_u_adjs_data_V_RDATA;
input   m_axi_u_adjs_data_V_RLAST;
input  [0:0] m_axi_u_adjs_data_V_RID;
input  [0:0] m_axi_u_adjs_data_V_RUSER;
input  [1:0] m_axi_u_adjs_data_V_RRESP;
input   m_axi_u_adjs_data_V_BVALID;
output   m_axi_u_adjs_data_V_BREADY;
input  [1:0] m_axi_u_adjs_data_V_BRESP;
input  [0:0] m_axi_u_adjs_data_V_BID;
input  [0:0] m_axi_u_adjs_data_V_BUSER;
input  [24:0] u_adjs_data_V_offset;

reg m_axi_u_adjs_data_V_ARVALID;
reg m_axi_u_adjs_data_V_RREADY;

wire    ap_start;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] num;
reg   [5:0] num_read_reg_269;
wire   [10:0] tmp_1_fu_155_p3;
reg   [10:0] tmp_1_reg_281;
wire    ap_CS_fsm_state2;
wire    grp_readItems_fu_144_ap_idle;
wire    grp_readItems_fu_144_ap_ready;
wire    grp_readItems_fu_144_ap_done;
wire   [10:0] i_fu_167_p2;
reg   [10:0] i_reg_289;
wire    ap_CS_fsm_state3;
wire   [31:0] pipe_stream_V_dout;
wire    pipe_stream_V_empty_n;
reg    pipe_stream_V_read;
wire   [0:0] exitcond_fu_162_p2;
reg    ap_block_state3;
reg   [31:0] tmp_77_reg_294;
wire   [4:0] tmp_68_fu_173_p1;
reg   [4:0] tmp_68_reg_300;
wire   [0:0] tmp_8_i_fu_177_p2;
reg   [0:0] tmp_8_i_reg_305;
wire    ap_CS_fsm_state4;
wire   [31:0] loc_V_fu_207_p2;
reg   [31:0] loc_V_reg_310;
wire   [1023:0] p_Result_1_fu_257_p3;
wire    ap_CS_fsm_state5;
wire   [1023:0] grp_writeResult_fu_138_ap_return;
wire    grp_readItems_fu_144_ap_start;
wire    grp_readItems_fu_144_m_axi_adjs_data_V_AWVALID;
wire   [31:0] grp_readItems_fu_144_m_axi_adjs_data_V_AWADDR;
wire   [0:0] grp_readItems_fu_144_m_axi_adjs_data_V_AWID;
wire   [31:0] grp_readItems_fu_144_m_axi_adjs_data_V_AWLEN;
wire   [2:0] grp_readItems_fu_144_m_axi_adjs_data_V_AWSIZE;
wire   [1:0] grp_readItems_fu_144_m_axi_adjs_data_V_AWBURST;
wire   [1:0] grp_readItems_fu_144_m_axi_adjs_data_V_AWLOCK;
wire   [3:0] grp_readItems_fu_144_m_axi_adjs_data_V_AWCACHE;
wire   [2:0] grp_readItems_fu_144_m_axi_adjs_data_V_AWPROT;
wire   [3:0] grp_readItems_fu_144_m_axi_adjs_data_V_AWQOS;
wire   [3:0] grp_readItems_fu_144_m_axi_adjs_data_V_AWREGION;
wire   [0:0] grp_readItems_fu_144_m_axi_adjs_data_V_AWUSER;
wire    grp_readItems_fu_144_m_axi_adjs_data_V_WVALID;
wire   [1023:0] grp_readItems_fu_144_m_axi_adjs_data_V_WDATA;
wire   [127:0] grp_readItems_fu_144_m_axi_adjs_data_V_WSTRB;
wire    grp_readItems_fu_144_m_axi_adjs_data_V_WLAST;
wire   [0:0] grp_readItems_fu_144_m_axi_adjs_data_V_WID;
wire   [0:0] grp_readItems_fu_144_m_axi_adjs_data_V_WUSER;
wire    grp_readItems_fu_144_m_axi_adjs_data_V_ARVALID;
wire   [31:0] grp_readItems_fu_144_m_axi_adjs_data_V_ARADDR;
wire   [0:0] grp_readItems_fu_144_m_axi_adjs_data_V_ARID;
wire   [31:0] grp_readItems_fu_144_m_axi_adjs_data_V_ARLEN;
wire   [2:0] grp_readItems_fu_144_m_axi_adjs_data_V_ARSIZE;
wire   [1:0] grp_readItems_fu_144_m_axi_adjs_data_V_ARBURST;
wire   [1:0] grp_readItems_fu_144_m_axi_adjs_data_V_ARLOCK;
wire   [3:0] grp_readItems_fu_144_m_axi_adjs_data_V_ARCACHE;
wire   [2:0] grp_readItems_fu_144_m_axi_adjs_data_V_ARPROT;
wire   [3:0] grp_readItems_fu_144_m_axi_adjs_data_V_ARQOS;
wire   [3:0] grp_readItems_fu_144_m_axi_adjs_data_V_ARREGION;
wire   [0:0] grp_readItems_fu_144_m_axi_adjs_data_V_ARUSER;
wire    grp_readItems_fu_144_m_axi_adjs_data_V_RREADY;
wire    grp_readItems_fu_144_m_axi_adjs_data_V_BREADY;
wire   [31:0] grp_readItems_fu_144_i_out_stream_V_din;
wire    grp_readItems_fu_144_i_out_stream_V_write;
reg   [1023:0] p_Val2_s_reg_115;
reg   [10:0] i_i_reg_127;
reg    grp_readItems_fu_144_ap_start_reg;
wire    pipe_stream_V_full_n;
reg    pipe_stream_V_write;
wire   [4:0] tmp_fu_182_p1;
wire   [9:0] tmp_64_fu_185_p3;
wire   [1023:0] tmp_65_fu_193_p1;
wire   [1023:0] tmp_66_fu_197_p2;
wire   [31:0] temp_V_fu_203_p1;
wire   [9:0] tmp_69_fu_213_p3;
wire   [1023:0] tmp_70_fu_220_p1;
wire   [1023:0] tmp_71_fu_224_p2;
wire   [1023:0] tmp_72_fu_230_p2;
wire   [1023:0] tmp_74_fu_242_p1;
wire   [1023:0] tmp_73_fu_236_p2;
wire   [1023:0] tmp_75_fu_245_p2;
wire   [1023:0] p_Result_s_fu_251_p2;
reg   [12:0] ap_NS_fsm;
wire    ap_ready;
wire    ap_done;
wire    ap_idle;
wire   [1023:0] ap_return;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 grp_readItems_fu_144_ap_start_reg = 1'b0;
end

readItems grp_readItems_fu_144(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_readItems_fu_144_ap_start),
    .ap_done(grp_readItems_fu_144_ap_done),
    .ap_idle(grp_readItems_fu_144_ap_idle),
    .ap_ready(grp_readItems_fu_144_ap_ready),
    .num(num_read_reg_269),
    .m_axi_adjs_data_V_AWVALID(grp_readItems_fu_144_m_axi_adjs_data_V_AWVALID),
    .m_axi_adjs_data_V_AWREADY(1'b0),
    .m_axi_adjs_data_V_AWADDR(grp_readItems_fu_144_m_axi_adjs_data_V_AWADDR),
    .m_axi_adjs_data_V_AWID(grp_readItems_fu_144_m_axi_adjs_data_V_AWID),
    .m_axi_adjs_data_V_AWLEN(grp_readItems_fu_144_m_axi_adjs_data_V_AWLEN),
    .m_axi_adjs_data_V_AWSIZE(grp_readItems_fu_144_m_axi_adjs_data_V_AWSIZE),
    .m_axi_adjs_data_V_AWBURST(grp_readItems_fu_144_m_axi_adjs_data_V_AWBURST),
    .m_axi_adjs_data_V_AWLOCK(grp_readItems_fu_144_m_axi_adjs_data_V_AWLOCK),
    .m_axi_adjs_data_V_AWCACHE(grp_readItems_fu_144_m_axi_adjs_data_V_AWCACHE),
    .m_axi_adjs_data_V_AWPROT(grp_readItems_fu_144_m_axi_adjs_data_V_AWPROT),
    .m_axi_adjs_data_V_AWQOS(grp_readItems_fu_144_m_axi_adjs_data_V_AWQOS),
    .m_axi_adjs_data_V_AWREGION(grp_readItems_fu_144_m_axi_adjs_data_V_AWREGION),
    .m_axi_adjs_data_V_AWUSER(grp_readItems_fu_144_m_axi_adjs_data_V_AWUSER),
    .m_axi_adjs_data_V_WVALID(grp_readItems_fu_144_m_axi_adjs_data_V_WVALID),
    .m_axi_adjs_data_V_WREADY(1'b0),
    .m_axi_adjs_data_V_WDATA(grp_readItems_fu_144_m_axi_adjs_data_V_WDATA),
    .m_axi_adjs_data_V_WSTRB(grp_readItems_fu_144_m_axi_adjs_data_V_WSTRB),
    .m_axi_adjs_data_V_WLAST(grp_readItems_fu_144_m_axi_adjs_data_V_WLAST),
    .m_axi_adjs_data_V_WID(grp_readItems_fu_144_m_axi_adjs_data_V_WID),
    .m_axi_adjs_data_V_WUSER(grp_readItems_fu_144_m_axi_adjs_data_V_WUSER),
    .m_axi_adjs_data_V_ARVALID(grp_readItems_fu_144_m_axi_adjs_data_V_ARVALID),
    .m_axi_adjs_data_V_ARREADY(m_axi_u_adjs_data_V_ARREADY),
    .m_axi_adjs_data_V_ARADDR(grp_readItems_fu_144_m_axi_adjs_data_V_ARADDR),
    .m_axi_adjs_data_V_ARID(grp_readItems_fu_144_m_axi_adjs_data_V_ARID),
    .m_axi_adjs_data_V_ARLEN(grp_readItems_fu_144_m_axi_adjs_data_V_ARLEN),
    .m_axi_adjs_data_V_ARSIZE(grp_readItems_fu_144_m_axi_adjs_data_V_ARSIZE),
    .m_axi_adjs_data_V_ARBURST(grp_readItems_fu_144_m_axi_adjs_data_V_ARBURST),
    .m_axi_adjs_data_V_ARLOCK(grp_readItems_fu_144_m_axi_adjs_data_V_ARLOCK),
    .m_axi_adjs_data_V_ARCACHE(grp_readItems_fu_144_m_axi_adjs_data_V_ARCACHE),
    .m_axi_adjs_data_V_ARPROT(grp_readItems_fu_144_m_axi_adjs_data_V_ARPROT),
    .m_axi_adjs_data_V_ARQOS(grp_readItems_fu_144_m_axi_adjs_data_V_ARQOS),
    .m_axi_adjs_data_V_ARREGION(grp_readItems_fu_144_m_axi_adjs_data_V_ARREGION),
    .m_axi_adjs_data_V_ARUSER(grp_readItems_fu_144_m_axi_adjs_data_V_ARUSER),
    .m_axi_adjs_data_V_RVALID(m_axi_u_adjs_data_V_RVALID),
    .m_axi_adjs_data_V_RREADY(grp_readItems_fu_144_m_axi_adjs_data_V_RREADY),
    .m_axi_adjs_data_V_RDATA(m_axi_u_adjs_data_V_RDATA),
    .m_axi_adjs_data_V_RLAST(m_axi_u_adjs_data_V_RLAST),
    .m_axi_adjs_data_V_RID(m_axi_u_adjs_data_V_RID),
    .m_axi_adjs_data_V_RUSER(m_axi_u_adjs_data_V_RUSER),
    .m_axi_adjs_data_V_RRESP(m_axi_u_adjs_data_V_RRESP),
    .m_axi_adjs_data_V_BVALID(1'b0),
    .m_axi_adjs_data_V_BREADY(grp_readItems_fu_144_m_axi_adjs_data_V_BREADY),
    .m_axi_adjs_data_V_BRESP(2'd0),
    .m_axi_adjs_data_V_BID(1'd0),
    .m_axi_adjs_data_V_BUSER(1'd0),
    .adjs_data_V_offset(u_adjs_data_V_offset),
    .i_out_stream_V_din(grp_readItems_fu_144_i_out_stream_V_din),
    .i_out_stream_V_full_n(pipe_stream_V_full_n),
    .i_out_stream_V_write(grp_readItems_fu_144_i_out_stream_V_write)
);

fifo_w32_d1_A pipe_stream_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_readItems_fu_144_i_out_stream_V_din),
    .if_full_n(pipe_stream_V_full_n),
    .if_write(pipe_stream_V_write),
    .if_dout(pipe_stream_V_dout),
    .if_empty_n(pipe_stream_V_empty_n),
    .if_read(pipe_stream_V_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_readItems_fu_144_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_readItems_fu_144_ap_start_reg <= 1'b1;
        end else if ((grp_readItems_fu_144_ap_ready == 1'b1)) begin
            grp_readItems_fu_144_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_i_reg_127 <= i_reg_289;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_readItems_fu_144_ap_done == 1'b1))) begin
        i_i_reg_127 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_Val2_s_reg_115 <= p_Result_1_fu_257_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_readItems_fu_144_ap_done == 1'b1))) begin
        p_Val2_s_reg_115 <= 1024'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_fu_162_p2 == 1'd0) & (pipe_stream_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_289 <= i_fu_167_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        loc_V_reg_310 <= loc_V_fu_207_p2;
        tmp_8_i_reg_305 <= tmp_8_i_fu_177_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_fu_162_p2 == 1'd0) & (pipe_stream_V_empty_n == 1'b0)) & (exitcond_fu_162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_68_reg_300 <= tmp_68_fu_173_p1;
        tmp_77_reg_294 <= pipe_stream_V_dout;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_u_adjs_data_V_ARVALID = grp_readItems_fu_144_m_axi_adjs_data_V_ARVALID;
    end else begin
        m_axi_u_adjs_data_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_u_adjs_data_V_RREADY = grp_readItems_fu_144_m_axi_adjs_data_V_RREADY;
    end else begin
        m_axi_u_adjs_data_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_fu_162_p2 == 1'd0) & (pipe_stream_V_empty_n == 1'b0)) & (exitcond_fu_162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        pipe_stream_V_read = 1'b1;
    end else begin
        pipe_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        pipe_stream_V_write = grp_readItems_fu_144_i_out_stream_V_write;
    end else begin
        pipe_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_readItems_fu_144_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((exitcond_fu_162_p2 == 1'd0) & (pipe_stream_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3) & (exitcond_fu_162_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if ((~((exitcond_fu_162_p2 == 1'd0) & (pipe_stream_V_empty_n == 1'b0)) & (exitcond_fu_162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state3 = ((exitcond_fu_162_p2 == 1'd0) & (pipe_stream_V_empty_n == 1'b0));
end

assign ap_start = 1'b1;

assign exitcond_fu_162_p2 = ((i_i_reg_127 == tmp_1_reg_281) ? 1'b1 : 1'b0);

assign grp_readItems_fu_144_ap_start = grp_readItems_fu_144_ap_start_reg;

assign i_fu_167_p2 = (i_i_reg_127 + 11'd1);

assign loc_V_fu_207_p2 = (32'd1 + temp_V_fu_203_p1);

assign m_axi_u_adjs_data_V_ARADDR = grp_readItems_fu_144_m_axi_adjs_data_V_ARADDR;

assign m_axi_u_adjs_data_V_ARBURST = grp_readItems_fu_144_m_axi_adjs_data_V_ARBURST;

assign m_axi_u_adjs_data_V_ARCACHE = grp_readItems_fu_144_m_axi_adjs_data_V_ARCACHE;

assign m_axi_u_adjs_data_V_ARID = grp_readItems_fu_144_m_axi_adjs_data_V_ARID;

assign m_axi_u_adjs_data_V_ARLEN = grp_readItems_fu_144_m_axi_adjs_data_V_ARLEN;

assign m_axi_u_adjs_data_V_ARLOCK = grp_readItems_fu_144_m_axi_adjs_data_V_ARLOCK;

assign m_axi_u_adjs_data_V_ARPROT = grp_readItems_fu_144_m_axi_adjs_data_V_ARPROT;

assign m_axi_u_adjs_data_V_ARQOS = grp_readItems_fu_144_m_axi_adjs_data_V_ARQOS;

assign m_axi_u_adjs_data_V_ARREGION = grp_readItems_fu_144_m_axi_adjs_data_V_ARREGION;

assign m_axi_u_adjs_data_V_ARSIZE = grp_readItems_fu_144_m_axi_adjs_data_V_ARSIZE;

assign m_axi_u_adjs_data_V_ARUSER = grp_readItems_fu_144_m_axi_adjs_data_V_ARUSER;

assign m_axi_u_adjs_data_V_AWADDR = 32'd0;

assign m_axi_u_adjs_data_V_AWBURST = 2'd0;

assign m_axi_u_adjs_data_V_AWCACHE = 4'd0;

assign m_axi_u_adjs_data_V_AWID = 1'd0;

assign m_axi_u_adjs_data_V_AWLEN = 32'd0;

assign m_axi_u_adjs_data_V_AWLOCK = 2'd0;

assign m_axi_u_adjs_data_V_AWPROT = 3'd0;

assign m_axi_u_adjs_data_V_AWQOS = 4'd0;

assign m_axi_u_adjs_data_V_AWREGION = 4'd0;

assign m_axi_u_adjs_data_V_AWSIZE = 3'd0;

assign m_axi_u_adjs_data_V_AWUSER = 1'd0;

assign m_axi_u_adjs_data_V_AWVALID = 1'b0;

assign m_axi_u_adjs_data_V_BREADY = 1'b0;

assign m_axi_u_adjs_data_V_WDATA = 1024'd0;

assign m_axi_u_adjs_data_V_WID = 1'd0;

assign m_axi_u_adjs_data_V_WLAST = 1'b0;

assign m_axi_u_adjs_data_V_WSTRB = 128'd0;

assign m_axi_u_adjs_data_V_WUSER = 1'd0;

assign m_axi_u_adjs_data_V_WVALID = 1'b0;

assign num = 6'd0;

assign p_Result_1_fu_257_p3 = ((tmp_8_i_reg_305[0:0] === 1'b1) ? p_Val2_s_reg_115 : p_Result_s_fu_251_p2);

assign p_Result_s_fu_251_p2 = (tmp_75_fu_245_p2 | tmp_73_fu_236_p2);

assign temp_V_fu_203_p1 = tmp_66_fu_197_p2[31:0];

assign tmp_1_fu_155_p3 = {{num_read_reg_269}, {5'd0}};

assign tmp_64_fu_185_p3 = {{tmp_fu_182_p1}, {5'd0}};

assign tmp_65_fu_193_p1 = tmp_64_fu_185_p3;

assign tmp_66_fu_197_p2 = p_Val2_s_reg_115 >> tmp_65_fu_193_p1;

assign tmp_68_fu_173_p1 = pipe_stream_V_dout[4:0];

assign tmp_69_fu_213_p3 = {{tmp_68_reg_300}, {5'd0}};

assign tmp_70_fu_220_p1 = tmp_69_fu_213_p3;

assign tmp_71_fu_224_p2 = 1024'd4294967295 << tmp_70_fu_220_p1;

assign tmp_72_fu_230_p2 = (tmp_71_fu_224_p2 ^ 1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215);

assign tmp_73_fu_236_p2 = (tmp_72_fu_230_p2 & p_Val2_s_reg_115);

assign tmp_74_fu_242_p1 = loc_V_reg_310;

assign tmp_75_fu_245_p2 = tmp_74_fu_242_p1 << tmp_70_fu_220_p1;

assign tmp_8_i_fu_177_p2 = ((tmp_77_reg_294 == 32'd4294967295) ? 1'b1 : 1'b0);

assign tmp_fu_182_p1 = tmp_77_reg_294[4:0];

always @ (posedge ap_clk) begin
    num_read_reg_269[5:0] <= 6'b000000;
    tmp_1_reg_281[10:0] <= 11'b00000000000;
end

endmodule //unite
